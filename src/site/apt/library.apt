    ----
    Library-Based STM Versus Bytecode-Rewriting
    ----

CCSTM - Library-Based STM Versus Bytecode-Rewriting

  One of the fundamental design decisions of CCSTM was that is should be
  an unprivileged library.  It does not attempt to provide transactional
  behavior for existing code, rather it is a tool to make it easy to write
  code that uses optimistic concurrency control.  Transactional reads and
  writes in CCSTM are explicit method calls on instances of <<<Ref>>>.
  Scala's concise syntax and implicit parameters make this compact,
  but the syntax is not identical to non-transactional code.

  Bytecode-rewriting STMs modify class files as they are being
  loaded by the JVM, typically generating both a transactional and
  a non-transactional version of every method.  In the transactional
  version, the normal bytecodes for field and array accesses are replaced
  with code sequences that invoke the STM.

  The decision between a library-based and bytecode-rewriting STM has
  many implications for the transactional code and for the system in
  which that code resides:

  * <<Existing code>>

    Bytecode-rewriting STMs can provide transactional execution for
    existing sequential code without any changes.  This means that
    transactions can include accesses to shared data structures whose
    source code is not available or that cannot be changed, and it
    minimizes the effort required to code with transactions even when
    source code is available.

    Not all sequential code will actually work well in transactions,
    however.  I/O and native method calls cause problems, because they
    can't be rolled back.  Much existing code also has incidental data
    dependencies (such as the <<<modCount>>> in many Java collections)
    that will prevent parallel execution of transactions.

  * <<Strong atomicity and isolation>>

    Perhaps the biggest problem with accessing existing data structures
    in a transaction is the interaction of simultaneous transactional and
    non-transactional accesses.  Unless they are handled specially (or
    disallowed) non-transactional reads might observe uncommitted values
    and non-transactional writes might corrupt concurrent atomic blocks.
    Bytecode-rewriting STMs can't take advantage of the type system to
    identify or prevent such heterogeneous accesses, and dynamically
    identifying or preventing those accesses is prohibitively expensive.
    The result is termed <weak isolation> or <weak atomicity>, and it
    substantially complicates the simplicity, safety and composability
    of the transactional programming model.

    A library-based STM using references can easily intercept all accesses
    to transactionally-managed data without imposing any performance
    penalty on the rest of the system.  This means that accesses from
    outside a transaction (single-operation transactions in CCSTM's
    terminology) interact properly with transactions.

  * <<Advanced operations>>

    CCSTM's <<<Ref>>>s provide many advanced operations in addition
    to the basic read and write.  These are difficult to provide in a
    bytecode-rewriting STM because memory locations have no first-class
    representation in Scala.  Some examples of these are <<<map>>>,
    <<<transform>>>, <<<swap>>>, and <<<unrecordedRead>>>.  See the
    <<<Ref>>> and <<<Ref.View>>> ScalaDoc for more operations.

  * <<Deployment>>

    CCSTM is an unprivileged Scala library, making its deployment as
    simple as any other library.  Bytecode-rewriting STMs, on the other
    hand, must be registered as privileged agents with the JVM using the
    <<<agentlib>>> or <<<javaagent>>> mechanism.  If a bytecode-rewriting
    STM wants to allow transactions to include library classes from the
    system class path, then those classes may need to be instrumented
    off-line.

  * <<Coexistence with other STMs>>

    Bytecode-rewriting STMs instrument methods of all loaded classes.
    This means that without some sort of higher-level cooperation,
    only a single STM may be used in a JVM.  Library-based STMs, on the
    other hand, do not affect code that does not use them, so separate
    components of the system may use different STM implementations.
    (We use the term coexistence rather than composability because it
    is unlikely that atomic blocks from different library-based STMs
    can be nested.)

    End users do not necessarily need to be concerned that an STM can't
    coexist with other implementations, but it is a big problem for
    library authors.  Without that ability, the use of STM in a library
    component places a global constraint on any program that depends
    on that component.  If library <A> chooses bytecode-rewriting STM
    <X> and library <B> (or the end user) chooses STM <Y>, <A> and <B>
    won't both be usable in the same system.

* Summary

  Bytecode-rewriting STMS provide a more convenient syntax, and may be
  able to run existing code without modification.  Library-based STMs
  like CCSTM provide a higher level of safety and composability.
